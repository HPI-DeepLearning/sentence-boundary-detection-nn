name: "sentence_boundary_detection"
#
# Data
#
#### BLOCKSTART: DEPLOY
#input: "data"
#input_dim: 1
#input_dim: 1
#input_dim: 5
#input_dim: 300
#### BLOCKEND: DEPLOY
#### BLOCKSTART: TRAINTEST
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  data_param {
    source: "/home/ms2015t3/sentence-boundary-detection-nn/leveldbs/basic_5_3_pos-false_qm-true_word-this/train"
    batch_size: 128
    backend: LEVELDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  data_param {
    source: "/home/ms2015t3/sentence-boundary-detection-nn/leveldbs/basic_5_3_pos-false_qm-true_word-this/test"
#### BLOCKSTART: TRAIN
    batch_size: 1024
#### BLOCKEND: TRAIN
#### BLOCKSTART: FULLTEST
#    batch_size: 14447
#### BLOCKEND: FULLTEST
    backend: LEVELDB
  }
}
#### BLOCKEND: TRAINTEST
#
# Fully Connected Layer 1
#
layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "data"
  top: "fc1"
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "fc1"
  top: "fc1"
}
layer {
  name: "drop1"
  type: "Dropout"
  bottom: "fc1"
  top: "fc1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
#
# Fully Connected Layer 2
#
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "fc2"
  top: "fc2"
}
layer {
  name: "drop2"
  type: "Dropout"
  bottom: "fc2"
  top: "fc2"
  dropout_param {
    dropout_ratio: 0.5
  }
}
#
# Fully Connected Layer 3
#
layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "fc2"
  top: "fc3"
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "fc3"
  top: "fc3"
}
layer {
  name: "drop3"
  type: "Dropout"
  bottom: "fc3"
  top: "fc3"
  dropout_param {
    dropout_ratio: 0.5
  }
}
#
# Fully Connected Layer Final - Preparation for Output
#
layer {
  name: "fc_final"
  type: "InnerProduct"
  bottom: "fc3"
  top: "fc_final"
  inner_product_param {
    num_output: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
#
# Loss, Accuracy
#
#### BLOCKSTART: DEPLOY
#layer {
#  name: "softmax"
#  type: "Softmax"
#  bottom: "fc_final"
#  top: "softmax"
#}
#### BLOCKEND: DEPLOY
#### BLOCKSTART: TRAINTEST
#### BLOCKSTART: TRAIN
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc_final"
  bottom: "label"
  top: "loss"
}
#### BLOCKEND: TRAIN
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc_final"
  bottom: "label"
  top: "accuracy"
  top: "recall_per_class"
  top: "precision_per_class"
  include {
    phase: TEST
  }
}
# HDF5 output

#### BLOCKSTART: FULLTEST
#layer {
#  name: "softmax"
#  type: "Softmax"
#  bottom: "fc_final"
#  top: "softmax"
#  include {
#    phase: TEST
#  }
#}
#layer {
#  name: "output"
#  type: "HDF5Output"
#  bottom: "label"
#  bottom: "softmax"
#  hdf5_output_param {
#    file_name: "/home/ms2015t3/sentence-boundary-detection-nn/hdf5/basic.h5"
#  }
#  include {
#    phase: TEST
#  }
#}
#### BLOCKEND: FULLTEST
#### BLOCKEND: TRAINTEST
